
# print("Магический переводчик")
# while True:
#     command = input("Введите команду: ").lower().split()

#     match command:
#         case ["вперед"]:
#             print("Действие: движение вперед")
#         case ['назад']:
#             print("Действие: движение назад")
#         case ['налево']:
#             print("Действие: движение налево")
#         case ['направо', x, m]:
#             print(f'идем направо {x} метров {m} минут')
#         case ['прыжок', y] if int(y) <= 5:
#             print(f'прыжок на {y} метров')
#         case ['прыжок', y] if int(y) > 5:
#             print(f'прыжок свыше {y} метров ОПАСЕН')
#         case ['стоп']:
#             print("Конец игры")  
#             break 
#         case _:
#             print("Неизвестная команда")


# _____________________________
# Задание 2: “Анализатор сокровищ”
# treasure = ['1', '2']  # Для списка из 2х элементов
# treasure = {'age': 100, 'cursed': 'dragon eye', 1: '3'}  # для словаря с проклятым предметом
# treasure = 1000  # для редкой находки
# treasure = {1, 'sword', 'health'}  # set- свой тип


# match treasure:
#     case set():
#         print('найдено множество')
#     case int() | float() as rare if rare >= 1000:
#         print('Найдена редкая находка')
#     case str() as string:
#         print(f"Обнаружен артефакт (строка): {string}")
#     case int() | float() as value:
#         print(f"Обнаружено числовое значение {value}")
#     case list() as my_list if len(my_list) == 2:  # Согласно ТЗ отработать список с 2мя эл-ми
#         print(f'у нас список {my_list} с {len(my_list)} элементами')
#     case list() as lst: 
#         print(f'Обнаружен список c {len(lst)} элементом(ами)')
#     case dict() as my_dict if 'cursed' in my_dict:
#         print(f'В словаре есть проклятый предмет: {my_dict['cursed']}')
#     case dict():
#         print('Обнаружен словарь')
#     case tuple():
#         print('Обнаружен кортеж')
#     case _:
#         print("Неизвестный тип сокровища")


# _________________________
# Задание 3: “Обработчик сообщений приключенческой игры”
# Разработайте систему обработки игровых событий, представленных в формате словарей
# (имитация JSON). Программа должна определять тип события и выполнять
# соответствующие действия с использованием конструкции match-case.

# event = {"type": "combat", "enemy": "Гоблин", "level": 5} # Битва
# event = {"type": "shop", "экипировка": {                  # Магазин
#                                     "ботинки": 200,
#                                     'меч': 2000,
#                                     'щит': 1500},
#                          'еда': {
#                                 'энергетик': 550,
#                                 'яблоко': 100,
#                                 'мясо': 600}}


# event = {"type": "weather", "temperature": '+15C', "wind": 'low', 'time': '3:00 PM'}  # Погода

# event = {"type": "location",              # Локация NPC
#          "NPC_locations": {
#                             "NPC_1": (200, 4000),
#                             'NPC_2': (2000, 2002),
#                             'NPC_3': (1500, 9833.2020)
#                             }
#         }


# match event:
#     case {"type": "combat", **rest} if rest['level'] > 3:  
#         print(f"Событие боя. Опасность: уровень игрока выше {event['level']}")
#     case {'type': 'shop', **rest}:   # для события магазин отрабатываем  вложенные словари
#         print('В магазине есть следующие категории товаров: ')       
#         [print(f'-, {x}') for x in rest.keys()]
#         choise = input('Что интересует? Введи: ').lower()
#         match choise:  # пробую вложить конструкцию match-case для отработки выбора вложенных словарей
#             case 'экипировка':
#                 print(f'в отделе <{choise}> след. товары:') 
#                 [print(f'- {x}: {y}') for x, y in rest[choise].items()]
#             case 'еда':
#                 print(f'в отделе <{choise}> след. товары:') 
#                 [print(f'- {x}: {y}') for x, y in rest[choise].items()]
#             case _:
#                 print('Таких товаров нет')
#     case {"type": "weather", **rest}:  
#         print(f'Погода на текущий момент:\n')
#         [print(f'- {x}: {y}') for x, y in rest.items()]
#     case {'type': 'location', **rest}:
#         print('Какой NPC из списка тебя интересует?')
#         [print(f'- {x}') for x in rest['NPC_locations'].keys()]
#         choise = input('Введи NPC: ')
#         match choise:
#             case 'NPC_1' | 'NPC_2' | 'NPC_3':
#                 print(f'{choise} имеет координаты: {rest['NPC_locations'][choise]}')
#             case _:
#                 print('Нет такого NPC')
#     case _:
#         print("Неизвестное событие")


# _________________________
# Задание 4: “Алхимическая лаборатория”
# Описание:
# Создайте программу для алхимика, которая анализирует комбинации ингредиентов и
# определяет, какое зелье получится. Используйте конструкцию match-case с условиями
# для проверки состава ингредиентов

# ingredients = ["гриб", "паучий глаз", "лягушачья лапка"] 
ingredients = ['яд', 'ухо', 'трава']  # Добавьте новый рецепт зелья, требующий точно два определённых ингредиента.
# ingredients = ['яд', 'ухо', 'трва']  # Реализуйте рецепт, который срабатывает только в случае отсутствия определённого ингредиента в списке.
# ingredients = ['хлор', 'нитроглицерин', 'тротил']  # Добавьте «запрещённую комбинацию» ингредиентов, приводящую к «взрыву» лаборатории.

match ingredients:
    case [_, "паучий глаз", _]:
        print("Возможно, получится зелье невидимости")
    case [*rest] if 'яд' in rest and 'трава' in rest:  # Добавьте новый рецепт зелья, требующий точно два определённых ингредиента. 
        print(f'Верно!для этого зелья как раз необходимы: <яд> и <трава>')
    case ['яд', 'ухо', a] if a != 'трава':  # Реализуйте рецепт, который срабатывает только в случае отсутствия определённого ингредиента в списке.
        print('трава отсутствует, поэтому зелье работает')
    case [a, b, c, d, e]:   # Создайте рецепт, который активируется только если в списке ингредиентов ровно пять элементов.
        print('5 ингридиентов')
    case [a, b, c] if set([a, b, c]).issubset(ingredients):  # Списки траснформируем в множества,чтобы не привязываться к порядку элемента. проверяем является ли захваченное множество подмножеством изначального множества
        print('Бабах')
    case _:
        print("Набор ингредиентов не подходит для создания известного зелья")


# Задание 5: “Космический навигатор”
# Описание:
# Разработайте систему навигации для космического корабля, которая анализирует данные
# от различных датчиков и выдаёт рекомендации по маршруту. Используйте конструкцию
# match-case для обработки полученных данных.

# sensor_data = {
#             "fuel": 40,
#             "distance_to_destination": 1400,
#             "engine_status": "норма",
#             "nearest_object": ''  # 'космическая станция'
#                 }


# match sensor_data:
#     case {'fuel': fuel} if not fuel:  # Проверка датчика топлива
#         print('Датчик топлива не отвечает')
#     case {"distance_to_destination": distance} if not distance:  # Проверка датчика расстояния
#         print('Датчик расстояния до цели не отвечает. Местонахождение корабля неизвестно')
#     case {'engine_status': status} if not status:  # Проверка датчика двигателя
#         print('Датчик двигателя не отвечает')
#     case {"fuel": fuel, "engine_status": status} if fuel < 20 and status != 'норма':  #
#         print("Проблемы с топливом и двигателем")
#     case {"fuel": fuel} if fuel < 20:  # Низкий уровень топлива
#         print("Критически низкий уровень топлива")
#     case {"distance_to_destination": distance} if distance < 500:  # приближение к цели
#         print(f'До пункта назначения осталось {distance} миль')
#     case {"nearest_object": n_object} if n_object:  # обнаружена космическая станция поблизости.
#         print(f'Рядом обнаружено: {n_object}')
#     case {'engine_status': status} if status == 'перегрев':  # Перегрев двигателя
#         print("Danger! Engine is overheated")
#     case _:
#         print("Данные в норме")