# –ó–∞–¥–∞–Ω–∏–µ 1: –ü–æ–∏—Å–∫ —Ç–∞–π–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞

# def find_signal(room) -> bool:
#     '''–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏ '—Å–∏–≥–Ω–∞–ª' –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏.
#     –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —Å–ø–∏—Å–æ–∫. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç False –∏–ª–∏ True(–≤ —Å–ª—É—á–∞–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞)'''     # –ù–ï –ó–ù–ê–Æ –∫–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–Ω–æ—Ç–∞—Ü–∏—é –Ω–∞ 2 –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–∏–ø–∞(—Å—Ç—Ä–æ–∫–∞/–ª–∏—Å—Ç)
#     if room == '—Å–∏–≥–Ω–∞–ª':
#         return True
  
#     elif isinstance(room, list):
#         for signal in room:          
#             if find_signal(signal):
#                 return '–º—ã –Ω–∞—à–ª–∏ –µ–≥–æ'                
#     return False
    

# bunker = [
# '—Ç–∏—à–∏–Ω–∞',
# ['—Ç–∏—à–∏–Ω–∞', ['—Ç–∏—à–∏–Ω–∞', ['—Ç–∏—à–∏–Ω–∞', '—Å–∏–≥–Ω–∞–ª'], '—Ç–∏—à–∏–Ω–∞'], '—Ç–∏—à–∏–Ω–∞'],
# ['—Ç–∏—à–∏–Ω–∞', ['—Ç–∏—à–∏–Ω–∞', ['—Ç–∏—à–∏–Ω–∞', ['—Ç–∏—à–∏–Ω–∞']]], '—Ç–∏—à–∏–Ω–∞'],
# '—Ç–∏—à–∏–Ω–∞'
# ]

# print(find_signal(bunker))             


# –ó–∞–¥–∞–Ω–∏–µ 2: –°–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –¥–æ –µ–¥—ã?


# count = 0  # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è - —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Å—á–µ—Ç–∞ —à–∞–≥–æ–≤. –≥–ª–æ–±–∞–ª—å–Ω–æ,
# —á—Ç–æ–±—ã –∑–Ω–∞—á–µ–Ω–∏–µ –µ–µ –Ω–µ –æ–±–Ω—É–ª—è–ª–æ—Å—å —Å –∫–∞–¥—ã–º –Ω–æ–≤—ã–º –≤—ã–∑–æ–≤–æ–º


# def count_steps_to_food(room:[str, list]) -> int:
#     '''–§—É–Ω–∫—Ü–∏—è –ø–æ—Å—á–µ—Ç–∞ —à–∞–≥–æ–≤. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª-–≤–æ —à–∞–≥–æ–≤ –¥–æ —Å—Ç—Ä–æ–∫–∏
#     "–µ–¥–∞".–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª-–≤–æ —à–∞–≥–æ–≤ '''   
#     if room == '–µ–¥–∞':
#         return True       
#     elif isinstance(room, list):
#         global count             
#         for step in room:
#             if step == '–ø—É—Å—Ç–æ':
#                 count += 1  
#             if count_steps_to_food(step):
#                 return count + 1
    
#     return 0


# bunker = [
# '–ø—É—Å—Ç–æ',
# ['–ø—É—Å—Ç–æ', ['–ø—É—Å—Ç–æ', ['–ø—É—Å—Ç–æ', '–ø—É—Å—Ç–æ', '–ø—É—Å—Ç–æ'], '–ø—É—Å—Ç–æ'], '–µ–¥–∞'],
# ['–ø—É—Å—Ç–æ', ['–ø—É—Å—Ç–æ', ['–ø—É—Å—Ç–æ', ['–ø—É—Å—Ç–æ']]]]
# ]

# print(count_steps_to_food(bunker))

# _____________________________
# –ó–∞–¥–∞–Ω–∏–µ 3: –°–ø–∞—Å–µ–Ω–∏–µ —Ä–æ–±–æ—Ç–∞

# steps_count = 0  # –û–ø—è—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è - —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç —à–∞–≥–æ–≤. –ì–ª–æ–±–∞–ª—å–Ω–∞—è, —á—Ç–æ–±—ã –Ω–µ –æ–±–Ω—É–ª—è–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏


# def rescue_robot(room:[str, list]) -> bool:
#     '''–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ä–æ–±–æ—Ç–∞. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ä–æ–±–æ—Ç
#     –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ/—Å—Ç—Ä–æ–∫–µ, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–µ–¥–µ—Ç –∫–æ–ª-–≤–æ —à–∞–≥–æ–≤,
#       –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ä–æ–±–æ—Ç –±—ã–ª –Ω–∞–π–¥–µ–Ω'''
    
#     if room == '—Ä–æ–±–æ—Ç':
#         return True
#     elif isinstance(room, list):
#         for item in room:
#             global steps_count
#             if isinstance(item, str):
#                 steps_count += 1
#             if rescue_robot(item):
#                 return (True, steps_count) 
#     return False 
                
# bunker = [
# '–º—É—Å–æ—Ä',
# ['–º—É—Å–æ—Ä', ['–º—É—Å–æ—Ä', ['–º—É—Å–æ—Ä', ['—Ä–æ–±–æ—Ç']], '–º—É—Å–æ—Ä'], '–º—É—Å–æ—Ä'],
# ['–º—É—Å–æ—Ä', ['–º—É—Å–æ—Ä', ['–º—É—Å–æ—Ä', ['–º—É—Å–æ—Ä']]]]
# ]

# robot, steps = rescue_robot(bunker)
# print(f'–†–æ–±–æ—Ç –Ω–∞–π–¥–µ–Ω: {robot}, –∑–∞ {steps} —à–∞–≥–æ–≤') # True

# ______________________________
# –ó–∞–¥–∞–Ω–∏–µ 4: –°–±–æ—Ä —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞


# def count_fuel(room:[str, list]) -> int:
#     '''–§—É–Ω–∫—Ü–∏—è –∏—â–µ—Ç –∏ —Å—á–∏—Ç–∞–µ—Ç –≤—Å–µ –∫–∞–Ω–∏—Å—Ç—Ä—ã —Å —Ç–æ–ø–ª–∏–≤–æ–º.–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫.
#     –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª-–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∏—Å—Ç—Ä'''
#     if room == '—Ç–æ–ø–ª–∏–≤–æ':
#         return 1
#     if isinstance(room, list):
#         total_fuel_count = 0
#         for item in room:            
#             total_fuel_count += count_fuel(item)
#         return total_fuel_count
#     return 0

    
# bunker = [
# '—Ç–æ–ø–ª–∏–≤–æ',
# ['–ø—É—Å—Ç–æ', ['—Ç–æ–ø–ª–∏–≤–æ', ['–ø—É—Å—Ç–æ', ['—Ç–æ–ø–ª–∏–≤–æ']], '–ø—É—Å—Ç–æ'], '–ø—É—Å—Ç–æ'],
# ['—Ç–æ–ø–ª–∏–≤–æ', ['–ø—É—Å—Ç–æ', ['—Ç–æ–ø–ª–∏–≤–æ', ['—Ç–æ–ø–ª–∏–≤–æ']]], '–ø—É—Å—Ç–æ'],
# '–ø—É—Å—Ç–æ'
# ]
# print(count_fuel(bunker)) #


# _________________________________________
# –ê —Ç–µ–ø–µ—Ä—å —Å–∞–º–æ–µ —Å–ª–∞–¥–∫–æ–µ!!! –°–õ–û–í–ê–†–ò!(((
# –î–µ—Ä–∂–∏—Å—å, –∫–∞–ø–∏—Ç–∞–Ω! üöÄ - —ç—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–±–æ–¥—Ä—è—é—â–∏–π —Ç–µ–∫—Å—Ç    
# 
#–ó–∞–¥–∞–Ω–∏–µ 1: –ù–∞–π—Ç–∏ –ø–æ—Ä—Ç–∞–ª –≤ –≥–ª—É–±–∏–Ω–∞—Ö —á–µ—Ä–Ω–æ–π –¥—ã—Ä—ã


def find_portal(space_map: dict) -> bool:
    '''–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ä—Ç–∞–ª–∞. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ 
        –≤ –ó–ù–ê–ß–ï–ù–ò–Ø–• –∫–ª—é—á–µ–π –Ω–∞–π–¥–µ–Ω –ø–æ—Ä—Ç–∞–ª, –∏–Ω–∞—á–µ False'''
    if isinstance(space_map, dict):
        for key, value in space_map.items():
            if value == '–ø–æ—Ä—Ç–∞–ª':
                return True
            elif find_portal(value):
                return True
    return False


space = {
        "—É—Ä–æ–≤–µ–Ω—å 1": {
            "—É—Ä–æ–≤–µ–Ω—å 2": {
                "—É—Ä–æ–≤–µ–Ω—å 3": {
                    "—É—Ä–æ–≤–µ–Ω—å 4": {
                        "–∞–Ω–æ–º–∞–ª–∏—è": {
                            "—Ä–∞–∑–ª–æ–º": {
                                "–ø–æ—Ä—Ç–∞–ª": "–ø–æ—Ä—Ç–∞–ª"
                                       }
                                     }
                                  }
                             }
                         }
                     }
                }

print(find_portal(space))


